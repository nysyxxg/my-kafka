P1：
Invalid receive (size = 436863757 larger than 104857600 )

1: 幂等性： seq <= oldseq
2：生产者分区写入策略
 2.1  轮询分配策略
 2.2  随机分配策略
 2.3  按key分配策略---key.hash取余
 2.4  自定义分区策略---类似MR的自定义分区

3： 消费者分区策略
    3.1 轮询策略  ： 消费者挨个分配消费的分区
    3.2 Range范围分配策略--默认的
       n = 分区数量 /  消费者数量
       m = 分区数量 % 消费者数量
       前m个消费者消费 n + 1 个，剩余消费者消费n个
    3.3  Stricky 粘性分配策略
       1：分区分配尽肯能的均匀
       2： 在发生rebalance的时候，
            轮询分配策略，会重新走一遍轮询分配的过程，
            但是粘性分配策略--> 分区的分配尽可能与上一次分配相同,只是将新的需要分配的分区，均匀的分配到现有的可用消费者中即可
       3： 在没有发生rebalance的时候，和轮询分配策略是一致的
4： kafka的乱序问题
   kafka中的消息全局是乱序的，局部是partition是有序的，如果是一个partition，数据是有序的。

5：消费组--的Reablance机制
   订阅Topic的个数，一个消费者，可以消费多个topic
   订阅Topic的分区数据
   Consumer的个数--》增加消费者或者减少消费者
   造成的影响：
   在平衡的过程中，所有的消费者都停止工作，直到平衡完成。
6： ISR ,OSR, AR
    AR = ISR + OSR

 7:如何保证kafka消息不丢失？
   生产者--保证发送消息不丢失
   broker设置--保证写入存储不丢失
   消费端设置--保证消费数据不丢失

