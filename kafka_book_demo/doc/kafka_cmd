1：创建topic：

bin/kafka-topics.sh --create --zookeeper localhost:2181/kafkagroup --topic  topic-test --replication-factor 3 --partitions 3

假设3个Broker
bin/kafka-topics.sh --create --zookeeper localhost:2181  --topic  topic-test --replication-factor 4 --partitions 4


删除Topic

 bin/kafka-topics --delete --zookeeper 【zookeeper server:port】 --topic 【topic name】




如果副本因子超过Broker的数量，无法创建Topic：所以副本因子最大为：3
[2021-03-10 12:57:20,516] ERROR org.apache.kafka.common.errors.InvalidReplicationFactorException:
Replication factor: 4 larger than available brokers: 3.

bin/kafka-topics.sh --create --zookeeper localhost:2181  --topic  topic-test --replication-factor 3 --partitions 4


2：  查看所有的Topic

bin/kafka-topics.sh --list--zookeeper localhost:2181

3: 查看describe

bin/kafka-topics.sh --describe --zookeeper localhost:2181  --topic test_history_file

新版本：
bin/kafka-topics.sh --describe  --bootstrap-server  localhost:9092 --topic test_history_file


Topic:test_history_file PartitionCount:3        ReplicationFactor:3     Configs:
        Topic: test_history_file        Partition: 0    Leader: 3       Replicas: 3,1,2 Isr: 3,1,2
        Topic: test_history_file        Partition: 1    Leader: 1       Replicas: 1,2,3 Isr: 1,2,3
        Topic: test_history_file        Partition: 2    Leader: 2       Replicas: 2,3,1 Isr: 2,3,1
 Leader 表示分区的leader副本所对应的brokerId,
  ISR 表示分区的ISR集合，
  Replicas 表示分区的所有副本的分配情况，即AR集合，其中的数字都表示的是brokerId.

4: 手动指定分区副本的分配方案：参数 -replica-assignment
--replica-assignment
<String:broker_id_for_part1_replica1:broker_id_for_part1_replica2,
        broker_id_for_part2_replica1:broker_id_for_part2_replica2 , ...>
这种方式是根据【分区号】的数值大小按照从小到大的顺序进行排列，分区与分区之间用逗号【,】隔开。分区内多个副本用冒号：隔开。
  bin/kafka-topics.sh --create --zookeeper localhost:2181 --topic topic-test2 --replica-assignment 0:1,1:2,2:0,2:1
  上面 --replica-assignment 0:1 , 1:2 , 2:0 , 2:1
                 Partition   0     1    2     3
   这个参数代表的意思： 0:1 表示第一个编号为0的分区，对应的两个副本所在BrokerId为0和1上。
  需要创建分区个数：4(0-3)，副本因子个数为：2 ， 分别指定了每个分区内部的副本所在BrokerId编号。
  bin/kafka-topics.sh --describe --zookeeper localhost:2181  --topic topic-test2

Topic:topic-test2       PartitionCount:4        ReplicationFactor:2     Configs:
        Topic: topic-test2      Partition: 0    Leader: 1       Replicas: 0,1   Isr: 1
        Topic: topic-test2      Partition: 1    Leader: 1       Replicas: 1,2   Isr: 1,2
        Topic: topic-test2      Partition: 2    Leader: 2       Replicas: 2,0   Isr: 2
        Topic: topic-test2      Partition: 3    Leader: 2       Replicas: 2,1   Isr: 2,1

5： 配置Key-value的参数：  --config
bin/kafka-topics.sh --create --zookeeper localhost:2181  --topic  topic-test --replication-factor 3 --partitions 4
--config cleanup.policy=compact --config max .message.bytes=lOOOO

查看配置参数：
一种通过： bin/kafka-topics.sh --describe --zookeeper localhost:2181  --topic topic-test2
另外一种：通过Zk客户端，  get /config/topics/topic-test2

6： 创建Topic，如果不存在，就创建：--if-not-exists

7： 从新版的0.10.X开始支持指定broker的机架信息，指定机架信息是通过broker端参数，broker.rack来配置，broker.rack=RACK1

   如果broker指定了机架信息，那么创建topic的时候，要么将集群中的所有的broker都加上机架信息，或者都去掉机架信息，
   需要指定参数：--disable-rack-aware


8： 消费kafka

bin/kafka-console-consumer.sh --bootstrap-server  localhost:9092 --topic topic-test2 --from-beginning >  test.json

bin/kafka-console-producer.sh --broker-list  localhost:9092  --topic streams-plaintext-input
bin/kafka-console-producer.sh --broker-list  localhost:9092  --topic topic-test2  --producer.config  config/producer.properties



9:查看某个分区的offset 偏移量： time为-1时表示最大值，time为-2时表示最小值

bin/kafka-run-class.sh kafka.tools.GetOffsetShell --topic topic-test2 --time -1 --broker-list   localhost:9092 --partitions 0
bin/kafka-run-class.sh kafka.tools.GetOffsetShell --topic topic-test2 --time -2 --broker-list   localhost:9092 --partitions 0


10: 修改kafka的分区

修改topic的分区数
# 将名为test的topic 修改为4个分区
# 注意 分区数只能增加不能减少

bin/kafka-topics.sh --zookeeper localhost:2181 -alter --partitions 4 --topic test

11 ：查看某个消费者消费情况（消息队列堆积情况）

# 0.8版本及以下的的kafka 使用如下命令查看名为 testgroup 的消费组的消费情况
./kafka-consumer-groups.sh --zookeeper localhost:2181 --group testgroup --describe

# 0.9版本及以上的的kafka 使用如下命令查看名为 testgroup 的消费组的消费情况
./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group testgroup --describe

12: 查看一个topic的所有分区

bin/kafka-run-class.sh kafka.tools.GetOffsetShell --topic test --time -2 --broker-list  localhost:9092

test:0:3774364
test:1:3672077
test:2:3734455
test:3:3237019
test:4:3755469
test:5:3870449
test:6:3962033
test:7:3775351
test:8:3680151
test:9:3734891








