1. cluster,  kafka集群唯一标识
2. controller_epoch,  初始为0，每次重新选举后+1，用于防止broker脑裂，无视epoch更低的请求

3. controller,  集群中第一个启动的broker通过在zk创建一个临时节点/controller让自己成为控制器。
             如果控制器被关闭或者与zk断开连接，这个节点会消失

4. brokers, 
get /brokers/topics/eip-dd-qiaohu-wechat-dataacess-test/partitions/0/state
{"controller_epoch":7,"leader":2,"version":1,"leader_epoch":4,"isr":[2,3,1]}


get /brokers/topics/eip-dd-qiaohu-wechat-wechatdata/partitions/0/state
{"controller_epoch":7,"leader":3,"version":1,"leader_epoch":0,"isr":[3,2,1]}  
上面数据说明：0分区的leader副本在brokerid为3上的机器上，
ISR集合：[3,2,1]，ISR集合中存储broker的ID，只有在ISR集合中发副本，才有可能等下次选举leader的时候，成为leader。

ISR集合中的副本都是与 Leader 同步的副本，相反，不在 ISR 中的追随者副本就被认为是与 Leader 不同步的。
就是说副本2和副本1都是与Leader副本3同步的副本。

get /brokers/topics/eip-dd-qiaohu-wechat-wechatdata/partitions/1/state
{"controller_epoch":7,"leader":1,"version":1,"leader_epoch":0,"isr":[1,3,2]}


get /brokers/topics/eip-dd-qiaohu-wechat-wechatdata/partitions/2/state
{"controller_epoch":7,"leader":2,"version":1,"leader_epoch":0,"isr":[2,1,3]}
​其中
controller_epoch： 表示的是当前的kafka控制器epoch.
leader：  表示当前分区的leader副本所在的broker的id编号，
version： 表示版本号，（当前半本固定位1），
leader_epoch： 表示当前分区的leader纪元，
isr： 表示变更后的isr列表。


5. zookeeper, 
6. admin,  admin/delete_topics 删除的主题

Kafka在启动的时候会开启两个与ISR相关的定时任务，名称分别为“isr-expiration"和”isr-change-propagation".

7. isr_change_notification,   


除此之外，当ISR集合发生变更的时候还会将变更后的记录缓存到isrChangeSet中，
isr-change-propagation任务会周期性（固定值为2500ms）地检查isrChangeSet，
如果发现isrChangeSet中有ISR 集合的变更记录，那么它会在Zookeeper的 /isr_change_notification的路径下
创建一个以isr_change开头的持久顺序节点（比如/isr_change_notification/isr_change_0000000000),
并将isrChangeSet中的信息保存到这个节点中。
kafka控制器为/isr_change_notification添加了一个Watcher，
当这个节点中有子节点发生变化的时候会触发Watcher动作，
以此通知控制器更新相关的元数据信息并向它管理的broker节点发送更新元数据信息的请求。
最后删除/isr_change_notification的路径下已经处理过的节点。
频繁的触发Watcher会影响kafka控制器，zookeeper甚至其他的broker性能。

为了避免这种情况，kafka添加了指定的条件，当检测到分区ISR集合发生变化的时候，还需要检查一下两个条件：

​（1）.上一次ISR集合发生变化距离现在已经超过5秒，

​（2）.上一次写入zookeeper的时候距离现在已经超过60秒。

​ 满足以上两个条件之一者可以将ISR写入集合的变化的目标节点。


8. consumers, 
9. log_dir_event_notification, 
10. latest_producer_id_block, 

[zk: localhost:2181(CONNECTED) 39]  get /latest_producer_id_block
{"version":1,"broker":2,"block_start":"12000","block_end":"12999"}

Kafka在Zookeeper中新引入了一个节点：/latest_producer_id_block，broker启动时提前预分配一段PID，
当前是0~999，即提前分配出1000个PID来，如下图所示：

[zk: localhost:2181(CONNECTED) 2] get /latest_producer_id_block

{"version":1,"broker":0,"block_start":"0","block_end":"999"}

一旦PID超过了999，则目前会按照1000的步长重新分配，到时候就应该是这个样子：

{"version":1, "broker":0,"block_start":"1000","block_end":"1999"}


11. config